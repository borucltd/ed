{"version":3,"sources":["components/Container/index.js","components/Row/index.js","components/Col/index.js","components/Header/index.js","components/Worker/index.js","utils/API.js","components/Dictionary/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Row","fluid","Col","Header","class","style","fontSize","htmlFor","onChange","handleInputChange","name","type","placeholder","id","Worker","src","workerData","picture","thumbnail","alt","dob","age","first","last","cell","location","country","query","axios","get","BASEURL","Dictionary","state","result","initial","searchPeople","API","then","res","console","log","data","setState","results","catch","err","compare","a","b","parameter","properties","split","length","sortRecords","column","sort","x","y","handleSort","event","preventDefault","target","reg","value","filtered","filter","record","match","this","Table","striped","bordered","hover","variant","onClick","map","item","key","Component","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.57852028.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction Container(props) {\n  return <div className=\"header\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\nfunction Col(props) {\n  //const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={12}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Header(props) {\n  return ( \n    <div class=\"jumbotron\">\n    <h1 className=\"text-dark\" style={{fontSize: '6rem'}}>Employee directory</h1>\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"Filter\">Search the first name: </label>\n        <input\n          onChange={props.handleInputChange}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"...\"\n          id=\"search\"\n        />\n      </div>\n    </form>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Worker(props) {\n  return (\n        <tr>\n            <td><img src={props.workerData.picture.thumbnail} alt=\"face\"></img></td>\n            <td>{props.workerData.dob.age}</td>\n            <td>{props.workerData.name.first}</td>\n            <td>{props.workerData.name.last} </td>\n            <td>{props.workerData.cell}</td>\n            <td>{props.workerData.location.country} </td>\n        </tr>\n  )\n}\n\nexport default Worker;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/\";\nconst APIRESULTS = \"?results=20\";\n\n\nexport default {\n  search: function(query) {\n    // https://randomuser.me/api/?results=20\n    return axios.get(BASEURL + APIRESULTS);\n  }\n};\n","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Row from \"../Row\";\nimport Col from \"../Col\";\nimport Header from \"../Header\";\nimport Worker from \"../Worker\";\nimport Table from 'react-bootstrap/Table';\nimport API from \"../../utils/API\";\nimport \"./style.css\";\n\n\nclass Dictionary extends Component {\n\n  // Setting the component's initial state\n  state = {\n    result: [],\n    initial: []\n  };\n\n  // when component is mounted (once only)\n  componentDidMount() {\n     this.searchPeople();\n  }\n\n  // custom method which runs API\n  searchPeople = query => {\n     API.search(query)\n        .then(res => {console.log(res.data); this.setState({ \n          result: res.data.results,\n          initial: res.data.results\n        })})\n        .catch(err => console.log(err));\n  };\n\n  // compare function\n  compare = (a,b,parameter) => {\n    if (parameter) {\n      const properties = parameter.split(\".\");  \n      switch (properties.length) {\n        case 1:\n          a = a[properties[0]];\n          b = b[properties[0]];\n          break;\n        case 2:\n          a = a[properties[0]][properties[1]];\n          b = b[properties[0]][properties[1]];\n          break;\n        case 3:\n          a = a[properties[0]][properties[1]][properties[2]];\n          b = b[properties[0]][properties[1]][properties[2]];\n          break;\n        default:\n          a = a[properties[0]];\n          b = b[properties[0]];\n          break;\n      }\n\n      if (a < b ) {\n        return -1;\n      } else if ( b < a ){\n        return 1;\n      } else {\n        return 0;\n      }\n    } else {\n      console.log(a)\n      return a - b;\n    } \n\n    \n  }\n\n  sortRecords = (column) => {\n    console.log(\"Sorting...\" + column)\n    // here the sorting will be different for different columns\n    switch(column) {\n      case \"age\":\n        this.setState({result: this.state.result.sort((x,y) => {return this.compare(x,y,\"dob.age\")})})  \n        break;\n\n      case \"first\":\n        this.setState({result: this.state.result.sort((x,y) => {return this.compare(x,y,\"name.first\")})})       \n        break;\n\n      case \"last\":\n        this.setState({result: this.state.result.sort((x,y) => {return this.compare(x,y,\"name.last\")})})   \n        break;\n\n      case \"mobile\":\n        this.setState({result: this.state.result.sort((x,y) => {return this.compare(x,y,\"phone\")})})   \n        break;\n\n      case \"country\":\n        this.setState({result: this.state.result.sort((x,y) => {return this.compare(x,y,\"location.country\")})}) \n        break;\n\n      default:\n        console.log(\"Noting.\");\n        break;\n    }\n  }\n\n  // sort handler\n  handleSort = event => {\n    event.preventDefault();\n    this.sortRecords(event.target.name);\n  }\n\n  // filter handler\n  handleInputChange = event => {\n    console.log(this.state.initial)\n    \n    event.preventDefault();\n    // getting the value which triggered the change\n    const reg  = `^${event.target.value}.*`;\n    console.log(\"Filtering...\" + reg)\n    // filter per first name\n    const filtered =  this.state.initial.filter(function(record){\n      return record.name.first.match(reg);\n    })\n    console.log(filtered.length);\n    if (filtered.length !== 0) {\n      this.setState({\n        result: filtered\n      })\n    } else {\n      this.setState({\n        result: this.state.initial\n      })\n    }       \n  }\n\n  render() {\n    return (\n        <Container>   \n          <Row fluid> \n            <Col>\n                  <Header handleInputChange={this.handleInputChange}/>\n\n                  <Table striped bordered hover variant=\"dark\">\n                      <thead>\n                          <tr>\n                          <th>Photo</th>\n                          <th><button onClick={this.handleSort} name=\"age\">Age</button></th>\n                          <th><button onClick={this.handleSort} name=\"first\">First Name</button></th>\n                          <th><button onClick={this.handleSort} name=\"last\">Last Name</button></th>\n                          <th><button onClick={this.handleSort} name=\"mobile\">Mobile</button></th>\n                          <th><button onClick={this.handleSort} name=\"country\">Country</button></th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                         {this.state.result.map((item,id) => (\n                            <Worker key={id} workerData={item}></Worker>\n                          ))}\n                      </tbody>    \n                  </Table>\n              </Col> \n            </Row>   \n        </Container>\n    )\n  }\n}\n\nexport default Dictionary;\n","import React from 'react';\nimport Dictionary from \"./components/Dictionary\";\n\n\nfunction App() {\n  return <Dictionary/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}